{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","state_code","zip_code","categories","title","review_count","require","config","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4e7370c.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className='Business'>\n        <div className='image-container'>\n          <img\n            src={this.props.business.imageSrc}\n            alt={this.props.business.name}\n          />\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className='Business-information'>\n          <div className='Business-address'>\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>\n              {this.props.business.state} {this.props.business.zipCode}\n            </p>\n          </div>\n          <div className='Business-reviews'>\n            <h3>{this.props.business.category}</h3>\n            <h3 className='rating'>{this.props.business.rating}</h3>\n            <p>{this.props.business.reviewCount} reviews</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","//The point of the <BusinessList /> component is to simulate\n//what a returned list of businesses would look like in Ravenous\n//(after querying the Yelp API, for example).\n\nimport React from 'react';\nimport './BusinessList.css';\n\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className='BusinessList'>\n        {this.props.businesses.map(business => (\n          <Business business={business} key={business.id} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: '',\n      location: '',\n      sortBy: 'best_match'\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count'\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    }\n    return '';\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption });\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  handleLocationChange(event) {\n    this.setState({ location: event.target.value });\n  }\n\n  handleSearch(event) {\n    this.props.searchYelp(\n      this.state.term,\n      this.state.location,\n      this.state.sortBy\n    );\n\n    event.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return (\n        <li\n          className={this.getSortByClass(sortByOptionValue)}\n          key={sortByOptionValue}\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        >\n          {sortByOption}\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <div className='SearchBar-sort-options'>\n          <ul>{this.renderSortByOptions()}</ul>\n        </div>\n        <div className='SearchBar-fields'>\n          <input\n            placeholder='Search Businesses'\n            onChange={this.handleTermChange}\n          />\n          <input placeholder='Where?' onChange={this.handleLocationChange} />\n        </div>\n        <div className='SearchBar-submit'>\n          <a onClick={this.handleSearch}>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","const apiKey =\n  '9nK6XAJ4ku4e-lcPJZl-M8ejICT6EjS0zJNPJYsZlwqmIT6JXbXBth17dAXWANlFTYzmKeRtPKlU2qgO375O6m7PVMPM6HJFdV4X9sMez5haI6obugJkMCBKZtClXXYx';\n\nconst Yelp = {\n  search(term, location, sortBy) {\n    return fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n      {\n        headers: {\n          Authorization: `Bearer ${apiKey}`\n        }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.businesses) {\n          return jsonResponse.businesses.map(business => ({\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address,\n            city: business.location.city,\n            state: business.location.state_code,\n            zipCode: business.location.zip_code,\n            category: business.categories.title,\n            rating: business.rating,\n            reviewCount: business.review_count\n          }));\n        }\n      });\n  }\n};\n\nexport default Yelp;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>hungry</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}